{"version":3,"sources":["components/SearchBar.js","components/VideoDetail.js","api/youtube.js","components/VideoItem.js","components/VideoList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchTerm","input","React","createRef","handleChange","e","setState","target","value","handleSubmit","preventDefault","onFormSubmit","props","current","children","Paper","elevation","style","padding","onSubmit","this","TextField","ref","fullWidth","label","onChange","Component","VideoDetail","video","src","id","videoId","Fragment","height","frameBorder","width","title","snippet","thumbnails","Typography","variant","channelTitle","varient","description","axios","create","baseURL","VideoItem","onVideoSelect","Grid","item","xs","display","alignItems","cursor","onClick","medium","url","alt","marginRight","VideoList","videos","liste","map","v","index","key","container","spacing","App","SearchTerm","a","youtube","get","params","part","maxResults","q","response","data","items","justify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.530861c6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Paper, TextField } from '@material-ui/core'\n\nexport default class SearchBar extends Component {\n    state={\n        searchTerm: ''\n    }\n    input =React.createRef()\nhandleChange= (e)=>{\n    this.setState({\n        searchTerm: e.target.value\n    })\n}\n\nhandleSubmit= (e) => {\n    e.preventDefault()\n    const { searchTerm }= this.state\n    const { onFormSubmit } =this.props\n    onFormSubmit(searchTerm)\n    this.input.current.children[1].children[0].value=''\n\n}\n\n    render() {\n        return (\n            <Paper elevation={6} style={{ padding: '25px' }}>\n                <form onSubmit={this.handleSubmit}>\n                    <TextField ref={this.input} fullWidth label=\"...\" onChange={this.handleChange} />\n                </form>\n            </Paper>)\n    }\n}\n","import React, { Component } from 'react'\nimport { Paper, Typography } from '@material-ui/core'\n\n class VideoDetail extends Component {\n\n    render() {\n        const { video }= this.props\n        if(!video)return <div> Chargement ...</div> \n            const src= `https://www.youtube.com/embed/${video.id.videoId}`\n    \n        return (\n            \n            <React.Fragment>\n                <Paper elevation={6} style={{ height: '60vh'}}>\n                    <iframe frameBorder='0' height='100%' width='100%' title={video.snippet.thumbnails.title} src={src} />\n                </Paper>\n                <Paper elevation={6} style={{ padding:'15px' }}>\n                    <Typography variant='h4'>{video.snippet.title} - {video.snippet.channelTitle} </Typography>\n                    <Typography variant='subtitle1' > {video.snippet.channelTitle} </Typography>\n                    <Typography varient='subtitle2' > {video.snippet.description} </Typography>\n                </Paper>\n            </React.Fragment>\n        )\n        \n        \n        \n    }\n}\nexport default VideoDetail","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://www.googleapis.com/youtube/v3'\n})","import React, { Component } from 'react'\nimport { Grid, Paper, Typography } from '@material-ui/core'\n\nexport default class VideoItem extends Component {\n   \n\n    render() {\n        const {video, onVideoSelect}=this.props\n        return (\n            <Grid item xs={12}>\n                <Paper style={{ display :'flex', alignItems: 'center', cursor:'pointer' }} onClick={()=> onVideoSelect(video)}>\n                    <img src={video.snippet.thumbnails.medium.url} alt=\"thumbnail\" style={{ marginRight : '20px' }} />\n                    <Typography variant=\"subtitle1\"> <strong>{video.snippet.title}</strong> </Typography>\n                </Paper>\n            </Grid>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Grid } from '@material-ui/core'\nimport VideoItem from './VideoItem'\n\n\nexport default class VideoList extends Component {\n     \n    render() {\n        const { videos, onVideoSelect }= this.props\n        const liste = videos.map((v, index) => <VideoItem onVideoSelect={onVideoSelect} key={index} video={v} />)\n        return (\n            <Grid container spacing={3}>\n                {liste}\n            </Grid>\n            \n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { Grid } from '@material-ui/core'\nimport SearchBar from './components/SearchBar'\nimport VideoDetail from './components/VideoDetail'\nimport youtube from './api/youtube';\nimport VideoList from './components/VideoList'\n\nclass App extends Component {\n\n  state={\n    videos: [],\n    video: null\n  }\n\nonVideoSelect = video => {\n  this.setState({\n    video\n  })\n  \n}\n\n  handleSubmit=async (SearchTerm) =>{\n    const response = await youtube.get('search', {\n      params: {\n        part: 'snippet',\n        maxResults: 5,\n        key: 'AIzaSyCLxNr6Ynx8toviEgJU9ksN0frKzqHdQe8',\n        q : SearchTerm\n    }\n    })\n\n   \n    this.setState({\n      video: response.data.items[0],\n      videos: response.data.items\n    })\n  }\n\n  render(){\nconst { video, videos }= this.state\n\n    return (\n      <Grid justify=\"center\" container spacing={10} style={{width: '100%', padding:'20px' }} >\n        <Grid item xs={12}>\n          <Grid container spacing={5}>\n            <Grid item xs={12}>\n              <SearchBar onFormSubmit ={this.handleSubmit} ></SearchBar>\n            </Grid>\n            <Grid item xs={8}>\n              <VideoDetail video={video}></VideoDetail>\n            </Grid>\n            <Grid item xs={4}>\n              <VideoList videos={videos} onVideoSelect={this.onVideoSelect} />\n            </Grid>\n          </Grid>\n        </Grid>\n\n      </Grid>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}